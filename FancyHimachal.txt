FANCY HIMACHAL


In Himachal, there are n cities (numbered 1 through n) and m bidirectional railways.
There is also a simple road network — for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them.
Travelling to a different town using one road always takes absolute difference of town numbers in hours.

A bus leaves town 1 having destination town d, and don't make any stops on the way.
The train can move only along railways and the bus can move only along roads.
You've been asked to plan out route for the bus; each route can use any road multiple times.

Under these constraints, what is the minimum number of hours needed for bus to reach destination town d (the minimum of arrival time of the bus)?


Input:
The first line of the input contains two integers n, m and d (2 ≤ n ≤ 1000, 0 ≤ m ≤ n * (n - 1) / 2, 2 ≤ d ≤ n) — the number of towns ,the number of railways and destination respectively.
Each of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 ≤ u, v ≤ n, u ≠ v).
You may assume that there is at most one railway connecting any two towns.


Output:
Output one integer — the smallest possible time of the bus's arrival in town d. If it's impossible for bus to reach town n, output -1.


Sample Input 1:
4 2 3
1 3
3 4
Sample Output 1:
output
2


Sample Input 2:
5 5 5
4 2
3 5
4 5
5 1
1 2
Sample Output 2:
6


Sample Input 3:
4 6 3
1 2
1 3
1 4
2 3
2 4
3 4
Sample Output 3:
-1


Code:
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair < ll, ll > pll;
typedef vector < ll > vll;

#define pb push_back

const ll inf = LLONG_MAX;
const ll N = 1e3 + 10;

vll rail[N];
vll road[N];
bool vis[N], visited[N];
ll dis[N];

void function(ll node);

int main() {
    ll n, m, d;
    cin >> m >> n >> d;
    ll u, v;
    fill(dis, dis + n, 0);
    for (ll i = 0; i < m; i++) {
        cin >> u >> v;
        rail[u].pb(v);
        vis[u][v] = true;
    }
    for (ll u = 1; u < n; u++) {
        for (ll v = u + 1; v <= n; v++) {
            if (!vis[u][v]) {
                road[u].pb({u - v, v});
            }
        }
    }
    function(1);
    if (dis[d] == inf) {
        cout << -1 << "\n";
    } else {
        cout << dis[d] << "\n";
    }
    return 0;
}

void function(ll node) {
    priority_queue < pll > q;
    q.push({0,node});
    dis[node] = 0;
    ll w;
    while (!q.empty()) {
        node = q.top().second;
        q.pop();
        visited[node] = true;
        for (auto x : road[node]) {
            ll u = x.second;
            ll w = x.first;
            if (!visited[u]) {
                if (dis[node] + w <= dis[u]) {
                    dis[u] = dis[node] + w;
                    q.push({u, dis[u]});
                }
            }
        }
    }
}